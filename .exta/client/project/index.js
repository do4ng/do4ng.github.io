// mdx/compile.ts
import { compile } from "@mdx-js/mdx";
import remarkGfm from "remark-gfm";
import rehypePrettyCode from "rehype-pretty-code";
import raw from "rehype-raw";

// plugins/anchor.ts
import visit from "unist-util-visit";
import toString from "mdast-util-to-string";

// pages/post/[slug].tsx
import { Link as Link3 } from "exta/components";
import { useRef, useState } from "react";

// components/post-card.tsx
import { Link, Image } from "exta/components";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";

// pages/tags.tsx
import { Link as Link2 } from "exta/components";
import { Fragment as Fragment2, jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";

// pages/tag/[slug].tsx
import { Fragment as Fragment3, jsx as jsx3, jsxs as jsxs3 } from "react/jsx-runtime";

// pages/post/[slug].tsx
import { Fragment as Fragment4, jsx as jsx4, jsxs as jsxs4 } from "react/jsx-runtime";
var langsIcons = {
  ts: "javascript-line",
  js: "javascript-line",
  tsx: "reactjs-line",
  jsx: "reactjs-line",
  html: "html5-line",
  css: "css3-fill",
  txt: "file-text-line",
  bash: "terminal-box-line",
  sh: "terminal-box-line"
};
var langs = {
  ts: "Typescript",
  js: "Javascript",
  tsx: "React",
  jsx: "React",
  html: "HTML",
  css: "CSS",
  txt: "Plain",
  bash: "Terminal",
  sh: "Terminal",
  rs: "Rust"
};
var components = {
  h1: (props) => {
    return jsx4("h1", { ...props });
  },
  h2: (props) => {
    return jsx4("h2", { ...props });
  },
  h3: (props) => {
    return jsx4("h3", { ...props });
  },
  h4: (props) => {
    return jsx4("h4", { ...props });
  },
  h5: (props) => {
    return jsx4("h5", { ...props });
  },
  h6: (props) => {
    return jsx4("h6", { ...props });
  },
  figure: (props) => {
    if (props["data-rehype-pretty-code-figure"] === "") {
      if (props.children[0]?.props["data-rehype-pretty-code-title"] !== "") {
        const lang = props.children.props["data-language"];
        const [copy, setCopy] = useState("copy");
        const ref = useRef();
        return jsxs4("div", { "data-rehype-pretty-code-fragment": "", children: [
          jsx4("div", { ...props.children.props, "data-rehype-pretty-code-title": "", children: jsxs4("div", { className: "code-lang", children: [
            jsx4("i", { className: `ri-${langsIcons[lang] || langsIcons.txt}` }),
            jsx4("span", { children: langs[lang] || langs.txt }),
            jsx4(
              "button",
              {
                ref,
                className: "copy-code",
                onClick: () => {
                  const code = ref.current.parentNode.parentNode.parentNode.querySelector(
                    "code"
                  ).innerText;
                  window.navigator.clipboard.writeText(code).then(() => {
                    setCopy("copied!");
                    setTimeout(() => {
                      setCopy("copy");
                    }, 2e3);
                  });
                },
                children: copy
              }
            )
          ] }) }),
          props.children
        ] });
      }
    }
    if (props["data-rehype-pretty-code-title"] === "") {
      const lang = props["data-language"];
      const [copy, setCopy] = useState("copy");
      const ref = useRef();
      const title = props.children;
      return jsx4("div", { ...props, children: jsxs4("div", { className: "code-lang", children: [
        jsx4("i", { className: `ri-${langsIcons[lang] || langsIcons.txt}` }),
        jsx4("span", { children: title }),
        jsx4(
          "button",
          {
            ref,
            className: "copy-code",
            onClick: () => {
              const code = ref.current.parentNode.parentNode.parentNode.querySelector(
                "code"
              ).innerText;
              window.navigator.clipboard.writeText(code).then(() => {
                setCopy("copied!");
                setTimeout(() => {
                  setCopy("copy");
                }, 2e3);
              });
            },
            children: copy
          }
        )
      ] }) });
    }
    return jsx4("div", { ...props });
  },
  pre: (props) => {
    return jsx4(Fragment4, { children: jsx4("div", { className: "code-block", style: props.style, children: jsx4("pre", { ...props }) }) });
  }
};

// mdx/run.ts
import { runSync } from "@mdx-js/mdx";
import * as runtime from "react/jsx-runtime";
var runMdx = (code) => {
  const mdx = runSync(code, runtime);
  const { default: Content2 } = mdx;
  return Content2;
};

// mdx/content.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
var Content = (props) => {
  const content = props.content;
  const MDX = runMdx(content);
  return jsx5(MDX, { components });
};

// pages/project/index.tsx
import { Fragment as Fragment5, jsx as jsx6, jsxs as jsxs5 } from "react/jsx-runtime";
function Repos({ props: { compiled } }) {
  return jsxs5(Fragment5, { children: [
    jsx6("h1", { style: { marginTop: "125px", paddingLeft: "10px" }, children: "Projects" }),
    jsxs5("div", { className: "hello", children: [
      jsx6("p", { className: "title", children: "/0-hello.mdx" }),
      jsx6(Content, { content: compiled })
    ] })
  ] });
}
export {
  Repos as _page
};
//# sourceMappingURL=data:application/json;base64,
